generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id                        String         @id @default(cuid())
  created_at                DateTime       @default(now())
  updated_at                DateTime       @default(now())
  deleted_at                DateTime?
  status                    Int?           @default(1) @db.SmallInt
  approved_at               DateTime?
  googleId          String?   @unique
  availability              String?
  email                     String?        @unique
  username                  String?        @unique
  name                      String?        @db.VarChar(255)
  first_name                String?        @db.VarChar(255)
  last_name                 String?        @db.VarChar(255)
  password                  String?        @db.VarChar(255)
  domain                    String?        @unique
  avatar                    String?
  phone_number              String?
  country                   String?
  state                     String?
  city                      String?
  address                   String?
  zip_code                  String?
  gender                    String?
  date_of_birth             DateTime?      @db.Date
  language                  String         @default("English")
  billing_id                String?
  type                      String?        @default("user")
  email_verified_at         DateTime?
  is_two_factor_enabled     Int?           @default(0)
  two_factor_secret         String?
  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]
  subscriptions        Subscription[]
  game_players         GamePlayer[] // Games this user is playing in
  rooms                Room[]
  leaderboards         Leaderboard[]
  games                Game[]

  @@map("users")
}

model Ucode {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  name             String?
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role_id    String
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id                    String             @id @default(cuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  deleted_at            DateTime?
  read_at               DateTime?
  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  order_id String?

  subscription_id String?
  subscription    Subscription? @relation(fields: [subscription_id], references: [id])

  type             String?  @default("order")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

model Message {
  id              String        @id @default(cuid())
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now())
  deleted_at      DateTime?
  status          MessageStatus @default(PENDING)
  sender_id       String?
  receiver_id     String?
  conversation_id String?
  attachment_id   String?
  message         String?
  attachment      Attachment?   @relation(fields: [attachment_id], references: [id])
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        User?         @relation("receiver", fields: [receiver_id], references: [id])
  sender          User?         @relation("sender", fields: [sender_id], references: [id])

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  name       String?
  type       String?
  size       Int?
  file       String?
  file_alt   String?
  messages   Message[]

  @@map("attachments")
}

model Conversation {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  creator_id     String?
  participant_id String?
  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  user_id    String?
  setting_id String?
  value      String?
  setting    Setting?  @relation(fields: [setting_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

model SubscriptionType {
  id          String   @id @default(cuid())
  type        String
  games       Int
  questions   Int
  players     Int
  price       Float
  status      String
  language_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  language    Language @relation(fields: [language_id], references: [id])

  subscriptions Subscription[]

  @@map("subscription_type")
}

model Subscription {
  id                   String @id @default(cuid()) // Unique identifier for user subscription
  user_id              String
  subscription_type_id String
  status               String @default("active")

  // Usage tracking
  games_played_count Int @default(0) // Games played this period

  payment_status           String?  @default("pending")
  // raw status from payment provider
  payment_raw_status       String?
  // paid amount from payment provider
  paid_amount              Decimal?
  // paid currency from payment provider
  paid_currency            String?
  // e.g. stripe, paypal, razorpay
  payment_provider         String?
  // e.g. stripe payment reference id
  payment_reference_number String?

  payment_provider_charge_type String?  @default("percentage") // e.g. fixed, percentage
  payment_provider_charge      Decimal? // e.g. stripe payment provider charge

  // Relations
  user                 User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription_type    SubscriptionType     @relation(fields: [subscription_type_id], references: [id])
  payment_transactions PaymentTransaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("subscriptions") // Table name in database
}

// ---------Start Game schema---------

enum GameMode {
  QUICK_GAME
  GRID_STYLE
}

model Game {
  id         String   @id @default(cuid()) // Unique identifier for the game
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  mode        GameMode @default(QUICK_GAME) // Game mode: Quick Game or Grid Style
  status      String?  @default("active")
  // For Grid Style - all categories are available, no specific category selected
  language_id String // Foreign key to Language model (game language)
  language    Language @relation(fields: [language_id], references: [id])

  host_id String?
  host    User?   @relation(fields: [host_id], references: [id])

  current_player_id String? // Track whose turn it is
  current_turn      Int           @default(1) // Turn counter
  game_phase        String        @default("waiting") // waiting, category_selection, question, completed
  total_questions   Int           @default(0) // Total questions in this game
  current_question  Int           @default(0) // Current question number
  // Relations
  game_players      GamePlayer[] // Players in this game
  rooms             Room[]
  leaderboards      Leaderboard[]

  game_selections GameSelection[]

  @@map("games")
}


model GameSelection {
  id             String   @id @default(cuid())
  game_id        String
  player_id      String   // GamePlayer ID
  category_id    String
  difficulty_id  String
  points         Int      // Points for this selection
  is_used        Boolean  @default(false)
  created_at     DateTime @default(now())
  
  game           Game       @relation(fields: [game_id], references: [id], onDelete: Cascade)
  player         GamePlayer @relation(fields: [player_id], references: [id], onDelete: Cascade)
  category       Category   @relation(fields: [category_id], references: [id], onDelete: Cascade)
  difficulty     Difficulty @relation(fields: [difficulty_id], references: [id], onDelete: Cascade)

  @@map("game_selections")
}

model GamePlayer {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  player_name     String?
  game_id         String
  room_id         String?
  score           Int            @default(0)
  correct_answers Int            @default(0)
  wrong_answers   Int            @default(0)
  skipped_answers Int            @default(0)
  player_order    Int
  final_rank      Int?
  user_id         String?
  game            Game           @relation(fields: [game_id], references: [id], onDelete: Cascade)
  room            Room?          @relation(fields: [room_id], references: [id])
  user            User?          @relation(fields: [user_id], references: [id])
  is_guest        Boolean  @default(false)
  player_answers  PlayerAnswer[]
  game_selections GameSelection[]

  @@map("game_players")
}

model PlayerAnswer {
  id             String     @id @default(cuid())
  game_player_id String
  question_id    String
  answer_id      String
  isCorrect      Boolean
  created_at     DateTime   @default(now())
  answer         Answer     @relation(fields: [answer_id], references: [id])
  game_player    GamePlayer @relation(fields: [game_player_id], references: [id])
  question       Question   @relation(fields: [question_id], references: [id])

  @@map("player_answers")
}

model Room {
  id           String       @id @default(cuid())
  code         String       @unique
  game_id      String
  host_id      String
  created_at   DateTime     @default(now())
  game_players GamePlayer[]
  game         Game         @relation(fields: [game_id], references: [id], onDelete: Cascade)
  host         User         @relation(fields: [host_id], references: [id], onDelete: Cascade)

  @@map("rooms")
}

model Leaderboard {
  id           String    @id @default(cuid())
  user_id      String
  game_id      String?
  category_id  String?
  score        Int       @default(0)
  correct      Int       @default(0)
  wrong        Int       @default(0)
  skipped      Int       @default(0)
  tts_speed    Int       @default(50)
  games_played Int       @default(0)
  mode         GameMode
  created_at   DateTime  @default(now())
  category     Category? @relation(fields: [category_id], references: [id], onDelete: Cascade)
  game         Game?     @relation(fields: [game_id], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("leaderboards")
}

model Language {
  id         String   @id @default(cuid()) // Unique identifier for the language
  name       String // e.g., English, Arabic
  code       String // e.g., en, ar
  file_url   String? // The language JSON file url
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  categories         Category[]
  question_types     QuestionType[]
  difficulties       Difficulty[]
  questions          Question[]
  games              Game[] // Games that use this language
  subscription_types SubscriptionType[]

  @@map("languages") // Table name in database
}

model Difficulty {
  id          String   @id @default(cuid()) // Unique identifier for difficulty level
  name        String // e.g., Easy, Medium, Extreme
  language_id String // Foreign key to Language model
  points      Int? // Points awarded based on difficulty of the question
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  language  Language   @relation(fields: [language_id], references: [id], onDelete: Cascade) // Relation with Language model
  questions Question[] // Related questions of this difficulty level

  game_selections GameSelection[]

  @@map("difficulties") // Table name in database
}

model QuestionType {
  id          String   @id @default(cuid()) // Unique identifier for the question type
  name        String // Name of the question type (e.g., Multiple Choice, True/False)
  language_id String // Foreign key to the Language model
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  language  Language   @relation(fields: [language_id], references: [id], onDelete: Cascade) // Relation with Language model
  questions Question[] // Related questions of this type

  @@map("question_types") // Table name in the database
}

model Category {
  id          String   @id @default(cuid()) // Unique identifier for category
  name        String // e.g., Science, History
  language_id String // Foreign key to Language model
  image       String? // Image for the category (optional)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  language     Language      @relation(fields: [language_id], references: [id], onDelete: Cascade) // Relation with Language model
  questions    Question[] // Related questions
  leaderboards Leaderboard[]

  game_selections GameSelection[]

  @@map("categories") // Table name in database
}

model Question {
  id               String   @id @default(cuid()) // Unique identifier for the question
  text             String // The question text
  category_id      String // Foreign key to Category model
  language_id      String // Foreign key to Language model
  difficulty_id    String // Foreign key to Difficulty model
  question_type_id String // Foreign key to QuestionType model
  file_url         String? // Optional file upload (e.g., image, document)
  time             Int // Time limit for answering the question (in seconds)
  free_bundle      Boolean? // Whether this question is part of a free bundle (Yes/No)
  firebase         Boolean? // Whether this question is stored in Firebase (Yes/No)
  points           Int // Points awarded based on difficulty of the question
  created_at       DateTime @default(now()) // Automatically sets the creation date
  updated_at       DateTime @updatedAt // Automatically updates the last modified date

  category       Category       @relation(fields: [category_id], references: [id], onDelete: Cascade) // Relation with Category model
  language       Language       @relation(fields: [language_id], references: [id], onDelete: Cascade) // Relation with Language model
  difficulty     Difficulty     @relation(fields: [difficulty_id], references: [id], onDelete: Cascade) // Relation with Difficulty model
  question_type  QuestionType   @relation(fields: [question_type_id], references: [id], onDelete: Cascade) // Relation with QuestionType model
  answers        Answer[] // Related answers to the question
  player_answers PlayerAnswer[] // Game answers for this question

  @@map("questions") // Table name in database
}

model Answer {
  id          String  @id @default(cuid()) // Unique identifier for each answer
  question_id String // Foreign key to Question model
  text        String? // The answer text
  file_url    String? // The answer file url
  is_correct  Boolean @default(false) // Whether the answer is correct or not

  question       Question       @relation(fields: [question_id], references: [id], onDelete: Cascade) // Relation with Question model
  player_answers PlayerAnswer[] // Related game answers

  @@map("answers") // Table name in database
}
